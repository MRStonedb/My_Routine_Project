# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kafka_push.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='kafka_push.proto',
  package='kafka_produce',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10kafka_push.proto\x12\rkafka_produce\"#\n\x13KafkaProduceRequest\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"#\n\x11KafkaProduceReply\x12\x0e\n\x06result\x18\x01 \x01(\t2l\n\x13KafkaProduceHandler\x12U\n\x0bPushToKafka\x12\".kafka_produce.KafkaProduceRequest\x1a .kafka_produce.KafkaProduceReply\"\x00\x62\x06proto3')
)




_KAFKAPRODUCEREQUEST = _descriptor.Descriptor(
  name='KafkaProduceRequest',
  full_name='kafka_produce.KafkaProduceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='kafka_produce.KafkaProduceRequest.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=35,
  serialized_end=70,
)


_KAFKAPRODUCEREPLY = _descriptor.Descriptor(
  name='KafkaProduceReply',
  full_name='kafka_produce.KafkaProduceReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='kafka_produce.KafkaProduceReply.result', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=72,
  serialized_end=107,
)

DESCRIPTOR.message_types_by_name['KafkaProduceRequest'] = _KAFKAPRODUCEREQUEST
DESCRIPTOR.message_types_by_name['KafkaProduceReply'] = _KAFKAPRODUCEREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

KafkaProduceRequest = _reflection.GeneratedProtocolMessageType('KafkaProduceRequest', (_message.Message,), {
  'DESCRIPTOR' : _KAFKAPRODUCEREQUEST,
  '__module__' : 'kafka_push_pb2'
  # @@protoc_insertion_point(class_scope:kafka_produce.KafkaProduceRequest)
  })
_sym_db.RegisterMessage(KafkaProduceRequest)

KafkaProduceReply = _reflection.GeneratedProtocolMessageType('KafkaProduceReply', (_message.Message,), {
  'DESCRIPTOR' : _KAFKAPRODUCEREPLY,
  '__module__' : 'kafka_push_pb2'
  # @@protoc_insertion_point(class_scope:kafka_produce.KafkaProduceReply)
  })
_sym_db.RegisterMessage(KafkaProduceReply)



_KAFKAPRODUCEHANDLER = _descriptor.ServiceDescriptor(
  name='KafkaProduceHandler',
  full_name='kafka_produce.KafkaProduceHandler',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=109,
  serialized_end=217,
  methods=[
  _descriptor.MethodDescriptor(
    name='PushToKafka',
    full_name='kafka_produce.KafkaProduceHandler.PushToKafka',
    index=0,
    containing_service=None,
    input_type=_KAFKAPRODUCEREQUEST,
    output_type=_KAFKAPRODUCEREPLY,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_KAFKAPRODUCEHANDLER)

DESCRIPTOR.services_by_name['KafkaProduceHandler'] = _KAFKAPRODUCEHANDLER

# @@protoc_insertion_point(module_scope)
